#!/bin/bash

# iaop - Integer Arithmetic Operations on Two Numbers

# Prompt user for input
echo "Enter the first number: "
read num1

echo "Enter the second number: "
read num2

# Perform arithmetic operations
sum=$((num1 + num2))
difference=$((num1 - num2))
product=$((num1 * num2))
quotient=$((num1 / num2))

# Display the results
echo "Sum: $sum"
echo "Difference: $difference"
echo "Product: $product"
echo "Quotient: $quotient"





#!/bin/bash

# faop - Floating Point Arithmetic Operations on Two Numbers

# Prompt user for input
echo "Enter the first number: "
read num1

echo "Enter the second number: "
read num2

# Perform arithmetic operations
sum=$(echo "$num1 + $num2" | bc)
difference=$(echo "$num1 - $num2" | bc)
product=$(echo "$num1 * $num2" | bc)
quotient=$(echo "scale=2; $num1 / $num2" | bc)

# Display the results
echo "Sum: $sum"
echo "Difference: $difference"
echo "Product: $product"
echo "Quotient: $quotient"



#!/bin/bash

# Program to calculate Ramesh's gross salary

# Prompt user for input
echo "Enter Ramesh's basic salary: "
read basic_salary

# Calculate dearness allowance (40% of basic salary)
dearness_allowance=$(echo "scale=2; 0.4 * $basic_salary" | bc)

# Calculate house rent allowance (20% of basic salary)
house_rent_allowance=$(echo "scale=2; 0.2 * $basic_salary" | bc)

# Calculate gross salary
gross_salary=$(echo "scale=2; $basic_salary + $dearness_allowance + $house_rent_allowance" | bc)

# Display the results
echo "Basic Salary: $basic_salary"
echo "Dearness Allowance: $dearness_allowance"
echo "House Rent Allowance: $house_rent_allowance"
echo "Gross Salary: $gross_salary"







#!/bin/bash

# Program to calculate the sum of digits of a five-digit number

# Prompt user for input
echo "Enter a five-digit number: "
read number

# Check if the input has exactly five digits
if [[ ! $number =~ ^[0-9]{5}$ ]]; then
    echo "Invalid input. Please enter a valid five-digit number."
    exit 1
fi

# Calculate the sum of digits
sum=0
for (( i=0; i<${#number}; i++ )); do
    digit=${number:$i:1}
    sum=$((sum + digit))
done

# Display the results
echo "Sum of digits: $sum"

#!/bin/bash

# Function to check if a year is a leap year
is_leap_year() {
    year=$1

    # Leap year conditions:
    # 1. Divisible by 4
    # 2. Not divisible by 100 unless also divisible by 400

    if (( (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0) )); then
        echo "$year is a leap year."
    else
        echo "$year is not a leap year."
    fi
}

# Check if an argument is supplied
if [ $# -eq 0 ]; then
    # If no argument is supplied, use the current year
    current_year=$(date +%Y)
    is_leap_year $current_year
else
    # If an argument is supplied, use the provided year
    is_leap_year $1
fi




#!/bin/bash

# check_char - Display message based on the entered character

# Prompt user for input
echo "Enter a character: "
read -n 1 char

# Check the type of character
if [[ $char =~ [a-z] ]]; then
    echo "You entered a lower case alphabet."
elif [[ $char =~ [A-Z] ]]; then
    echo "You entered an upper case alphabet."
elif [[ $char =~ [0-9] ]]; then
    echo "You have entered a digit."
elif [[ $char =~ [[:punct:]] ]]; then
    echo "You have entered a special symbol."
elif [ ${#char} -gt 1 ]; then
    echo "You have entered more than one character."
else
    echo "Invalid input."
fi












#!/bin/bash

# prog - Merge, sort, and display the content of files a.txt, b.txt, and c.txt

# Merge the content of files a.txt, b.txt, and c.txt
cat a.txt b.txt c.txt > merged.txt

# Sort the merged content and save the result in a file called result
sort merged.txt > result

# Display the sorted output on the screen
echo "Sorted content:"
cat result

# Clean up temporary files
rm merged.txt


#!/bin/bash

# systeminfo - Display user and system information

# Display login name of the user
echo "Login name: $USER"

# Display name of the Unix system
echo "Unix system: $(uname -s)"

# Display type of SHELL
echo "Shell type: $SHELL"

# Display path of current working directory
echo "Current working directory: $PWD"

# Display list of files in current working directory
echo -e "\nList of files in current working directory:"
ls -l


#!/bin/bash

# dtcal - Display system date and calendar for a specific month

# Display system date
echo "System Date: $(date "+%A, %B %d, %Y %r")"

# Display calendar for a specific month (e.g., March 2022)
echo -e "\nCalendar for March 2022:"
cal 3 2022


#!/bin/bash

# nvwc - Display filename, line count, word count, and character count of a file

# Specify the filename
filename="dtcal.sh"

# Display information in the specified format
echo -e "Filename: $filename\n"

# Use wc command to get line count, word count, and character count
line_count=$(wc -l < "$filename")
word_count=$(wc -w < "$filename")
char_count=$(wc -c < "$filename")

# Display the counts
echo "Line count: $line_count"
echo "Word count: $word_count"
echo "Character count: $char_count"




#!/bin/bash

# nvwc2 - Display filename, line count, word count, and character count of a file

# Check if filename is provided as an argument
if [ $# -eq 0 ]; then
    echo "Usage: $0 <filename>"
    exit 1
fi

filename=$1

# Display header
echo -e "Filename\tLinecount\tWordcount\tCharcount"

# Use wc command to get line count, word count, and character count
line_count=$(wc -l < "$filename")
word_count=$(wc -w < "$filename")
char_count=$(wc -c < "$filename")

# Display the counts
echo -e "$filename\t$line_count\t\t$word_count\t\t$char_count"

#!/bin/bash

# darg - Display total number of command line arguments and the first two arguments

# Display total number of command line arguments
echo "Total number of command line arguments: $#"

# Display the first two arguments
if [ $# -ge 1 ]; then
    echo "First argument: $1"
fi

if [ $# -ge 2 ]; then
    echo "Second argument: $2"
fi

